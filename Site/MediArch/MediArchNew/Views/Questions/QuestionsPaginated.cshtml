@model IEnumerable<Data.Domain.Entities.Question>

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@using Data.Domain.Interfaces
@inject IQuestionService question_service

@using MediArch.Services.Interfaces
@inject IApplicationUserService user_service

@{
    ViewData["Title"] = "QuestionsPaginated";
}

<div class="General_remake">
    <br />
    <img src="~/images//Assistance.png" class="img_logos">
    <br />

    @using (Html.BeginForm("Create", "Questions", new { uid = UserManager.GetUserId(User) }, FormMethod.Post, null, new { }))
    {
        <button class="button_remake">Create a New Question</button>
    }

    <br>
    <div class="talbe_remake">
        <br />
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Topic)
                    </th>

                    <th>
                        Question
                    </th>

                    <th>
                        Answers
                    </th>
                </tr>
            </thead>
            <tbody>
            @{ var No_Q = 0;}
            @foreach (var item in Model)
            {
                <tr id="Q_NR_@No_Q">
                    @{No_Q++;}
                    <td>
                        @Html.DisplayFor(modelItem => item.Topic)
                    </td>
                    <td>
                        <div class="btn-group dropright">
                            <a class="btn btn-secondary dropdown-toggle dropdown-toggle-split flt_right" data-toggle="dropdown"> @Html.DisplayFor(modelItem => item.Text) </a>
                            <ul class="dropdown-menu">
                                @{
                                    <li><a asp-action="Details" asp-controller="Account" asp-route-id="@item.UserId">Posted by: @user_service.GetFullUserNameById(item.UserId.ToString()) on @item.CreatedDate</a></li>

                                    string gui3 = @item.UserId.ToString();
                                    if (User.IsInRole("Moderator") || User.IsInRole("Owner") || gui3 == UserManager.GetUserId(User))
                                    {
                                        <li><a asp-action="Edit" asp-route-id="@item.Id">Edit</a></li>
                                    }
                                        <li><a asp-action="Details" asp-route-id="@item.Id">Details</a></li>
                                        if (User.IsInRole("Moderator") || User.IsInRole("Owner") || gui3 == UserManager.GetUserId(User))
                                    {
                                        <li><a asp-action="Delete" asp-route-id="@item.Id">Delete</a></li>
                                    }
                                }
                            </ul>
                        </div>
                    </td>
                    <td>
                        <br>
                        <table class="More_a_remake">
                            <thead>
                                <tr>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var answer in question_service.GetAllAnswersForQuestion(item.Id))
                                {

                                    <tr>
                                        <td>
                                            <div class="btn-group dropright">
                                                <a class="btn btn-secondary dropdown-toggle dropdown-toggle-split flt_right" data-toggle="dropdown">@answer.Text </a>
                                                <ul class="dropdown-menu">
                                                    @{
                                                        <li><a asp-action="Details" asp-controller="Account" asp-route-id="@answer.UserId">Posted by @user_service.GetFullUserNameById(answer.UserId.ToString()) on @answer.AnswerDate</a></li>
                                                        string gui1 = answer.UserId.ToString();

                                                        if (User.IsInRole("Moderator") || User.IsInRole("Owner") || gui1 == UserManager.GetUserId(User))
                                                        {
                                                            <li><a asp-controller="Answers" asp-action="Edit" asp-route-id="@answer.Id">Edit</a></li>

                                                        }
                                                        if (User.IsInRole("Moderator") || User.IsInRole("Owner") || gui3 == UserManager.GetUserId(User))
                                                        {
                                                            <li><a asp-controller="Answers" asp-action="Details" asp-route-id="@answer.Id">Details</a></li>
                                                        }
                                                        if (User.IsInRole("Moderator") || User.IsInRole("Owner") || gui1 == UserManager.GetUserId(User))
                                                        {
                                                            <li><a asp-controller="Answers" asp-action="Delete" asp-route-id="@answer.Id">Delete</a></li>
                                                        }
                                                    }
                                                </ul>
                                            </div>
                                            <br />
                                        </td>
                                    </tr>


                                    }
                        </table>

                        <div class="form-group">
                            <br>
                            @using (Html.BeginForm("CreateNewAnswer", "Answers", new { qid = item.Id, uid = UserManager.GetUserId(User), noPage = TempData["NoPage"] }, FormMethod.Post, null, new { }))
                            {
                                <input type="text" id="qtext" name="qtext" class="input_remake resize_medium">
                                <br/>
                                <button class="button_remake" id="Submit_Answer">Submit Answer</button>
                            }
                        </div>
                    </td>



                </tr>
            }
            </tbody>
        </table>
    </div>

    <input type="hidden" id="CurrentIdPage" value="1" />
</div>
@if (question_service.GetNumberOfPagesForQuestions() > 1)
{
    <div class="Centered">
        <input type="button" id="No_Page_<<" value="<<" />
        <input type="button" id="No_Page_<" value="<" />
        <b id="...1">...</b>
        @for (int NrOfPage = 1; NrOfPage <= @question_service.GetNumberOfPagesForQuestions(); NrOfPage++)
        {
            <input type="button" id="No_Page_@NrOfPage" value="@NrOfPage" />
        }
        <b id="...2">...</b>
        <input type="button" id="No_Page_>" value=">" />
        <input type="button" id="No_Page_>>" value=">>" />
    </div>
}

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script type="text/javascript">

        $(document).ready(function () {
            //BeginForm("CreateNewAnswer", "Answers", new { qid = item.Id, uid = UserManager.GetUserId(User) }, FormMethod.Post, null, new { })
         /*   $('[id*=Submit_Answer_]').click(function () {
                var questionId = this.id.substring(14);
                var userId =UserManager.GetUserId(User);
                var thisText = document.getElementById('qtext_' + questionId).value;
                $.ajax({
                     type: 'POST',
                     url: 'Url.Action("CreateNewAnswer", "Answers")',
                     data: { uid: userId, qid: questionId, text: thisText},
                     success: function (data) {
                         console.log("Should redirect");
                     }
                }).done(function (data) {
                    var currentlink = window.location.href;
                    //console.log("done")
                    location.replace(RedirectPage);
                });
            });
        */
            var currentlink = window.location.href;
            var currentLinkSplit = currentlink.split('?');
            var actualPageNo = 0;
            if (currentLinkSplit.length == 1) {
                actualPageNo = 1;
            }
            else {
                actualPageNo = currentLinkSplit[1].split('=')[1];
            }

            console.log(actualPageNo);
            document.getElementById("CurrentIdPage").value = actualPageNo;

            var MaxPages =@question_service.GetNumberOfPagesForQuestions();

            if (MaxPages > 1) {
                document.getElementById("...1").style.display = "none";

                if (MaxPages <= 4) {
                    document.getElementById("...2").style.display = "none";
                    document.getElementById("No_Page_>>").style.display = "none";
                    document.getElementById("No_Page_<<").style.display = "none";
                }
                else {
                    for (var i = 4; i <= MaxPages; i++)
                        document.getElementById("No_Page_" + i).style.display = "none";
                }

                if (MaxPages > 4) {
                    if (parseInt(actualPageNo) >= 3) {
                        document.getElementById("...1").style.display = "inline";
                    }

                    else {
                        document.getElementById("...1").style.display = "none";

                    }

                    if (parseInt(actualPageNo) >= MaxPages - 1) {
                        document.getElementById("...2").style.display = "none";

                    }
                    else {
                        document.getElementById("...2").style.display = "inline";
                    }



                    if (actualPageNo != 1 && actualPageNo != MaxPages) {
                        for (var i = 1; i <= MaxPages; i++) {
                            var id_string = "No_Page_".concat(i);
                            document.getElementById(id_string).style.display = "none";
                        }

                        for (var i = parseInt(actualPageNo) - 1; i <= parseInt(actualPageNo) + 1; i++) {
                            var id_string = "No_Page_".concat(i);
                            document.getElementById(id_string).style.display = "inline";
                        }
                    }
                    else {
                        if (actualPageNo == MaxPages) {
                            for (var i = 1; i <= MaxPages; i++) {

                                var id_string = "No_Page_".concat(i);
                                document.getElementById(id_string).style.display = "none";
                            }

                            for (var i = MaxPages - 2; i <= MaxPages; i++) {
                                var id_string = "No_Page_".concat(i);
                                document.getElementById(id_string).style.display = "inline";
                            }

                        }
                    }
                }
            }

            $('[id*=No_Page_]').click(function () {

                //var PgId = $('[id=Id]').val();
                var pageNumber = this.id.substring(8);
                if (pageNumber == "<<") {
                    pageNumber = 1;

                    for (var i = 1; i <= MaxPages; i++) {
                        var id_string = "No_Page_".concat(i);
                        document.getElementById(id_string).style.display = "none";
                    }

                    for (var i = 1; i <= 3; i++) {
                        var id_string = "No_Page_".concat(i);
                        document.getElementById(id_string).style.display = "inline";
                    }

                }

                if (pageNumber == ">>") {
                    pageNumber = MaxPages;
                    for (var i = 1; i <= pageNumber; i++) {
                        var id_string = "No_Page_".concat(i);
                        document.getElementById(id_string).style.display = "none";
                    }

                    for (var i = pageNumber - 2; i <= pageNumber; i++) {
                        var id_string = "No_Page_".concat(i);
                        document.getElementById(id_string).style.display = "inline";
                    }
                }

                if (pageNumber == "<") {
                    pageNumber = parseInt($('#CurrentIdPage').val().valueOf());
                    pageNumber = pageNumber - 1;
                    if (pageNumber < 1) {
                        pageNumber = 1;

                    }
                }
                if (pageNumber == ">") {
                    pageNumber = parseInt($('#CurrentIdPage').val());
                    pageNumber = pageNumber + 1;
                    if (pageNumber > MaxPages) {
                        pageNumber = MaxPages;

                    }
                }
                //console.log(pageNumber)

                var currentlink = window.location.href;
                var spl = currentlink.split("/");
                //alert(spl[2])
                var RedirectPage = 'https://'+spl[2]+'@Url.Action("QuestionsPaginated", "Questions")' + '?NoPage=' + pageNumber
                //console.log(RedirectPage)

                document.getElementById("CurrentIdPage").value = pageNumber;
                $.ajax({
                    /* type: 'POST',
                     url: 'Users',
                     data: { noPage: pageNumber },
                     success: function (data) {
                         console.log("Should redirect");
                         console.log(pageNumber)
                     }*/
                }).done(function (data) {
                    //console.log("done")
                    location.replace(RedirectPage);
                });
            });
        });

    </script>
